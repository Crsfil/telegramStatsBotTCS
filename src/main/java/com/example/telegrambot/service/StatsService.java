package com.example.telegrambot.service;

import com.example.telegrambot.model.Meeting;
import com.example.telegrambot.model.MeetingType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.stereotype.Service;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.Locale;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class StatsService {

    private final ObjectMapper objectMapper;
    private final String dataFilePath = "meetings.json";
    private final GoogleSheetsService googleSheetsService;
    private static final ZoneId ZONE = ZoneId.of("Europe/Moscow");
    private static final Locale RU = Locale.forLanguageTag("ru");

    private static LocalDate startOfWeek(LocalDate ref) {
        return ref.with(DayOfWeek.MONDAY);
    }
    private static String formatWeekRange(LocalDate weekStart) {
        LocalDate weekEnd = weekStart.plusDays(6);

        boolean sameMonth = weekStart.getMonth().equals(weekEnd.getMonth()) && weekStart.getYear() == weekEnd.getYear();
        if (sameMonth) {
            String month = weekStart.format(DateTimeFormatter.ofPattern("LLLL", RU)); // ¬´—Å–µ–Ω—Ç—è–±—Ä—è¬ª
            return weekStart.getDayOfMonth() + "‚Äì" + weekEnd.getDayOfMonth() + " " + month;
        }

        boolean sameYear = weekStart.getYear() == weekEnd.getYear();
        String left = weekStart.format(DateTimeFormatter.ofPattern("d LLLL" + (sameYear ? "" : " yyyy"), RU));
        String right = weekEnd.format(DateTimeFormatter.ofPattern("d LLLL yyyy", RU));
        return left + " ‚Äì " + right;
    }

    public StatsService(GoogleSheetsService googleSheetsService) {
        this.objectMapper = new ObjectMapper();
        this.objectMapper.registerModule(new JavaTimeModule());
        this.googleSheetsService = googleSheetsService;
    }

    public void saveMeeting(Meeting meeting) {
        try {
            // backup –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            List<Meeting> meetings = loadAllMeetings();
            meetings.add(meeting);
            objectMapper.writeValue(new File(dataFilePath), meetings);

            // –∑–∞–ø–∏—Å—å –≤ Google Sheets (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            try {
                if (meeting.getMeetingType() == MeetingType.RESCHEDULED) {
                    googleSheetsService.saveRescheduleToSheets(meeting.getUserId(), meeting.getRescheduleReason(), meeting.getComment());
                } else if (meeting.getMeetingType() == MeetingType.COMMENT) {
                    googleSheetsService.saveCommentToSheets(meeting.getUserId(), meeting.getComment());
                } else {
                    if (meeting.getOffers() != null && !meeting.getOffers().isEmpty()) {
                        googleSheetsService.saveMeetingToSheets(meeting.getUserId(), meeting.getOffers(), meeting.getId());
                    }
                }
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ Google Sheets –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                System.out.println("Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: " + e.getMessage());
            }
        } catch (IOException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏", e);
        }
    }

    public List<Meeting> loadAllMeetings() {
        try {
            File file = new File(dataFilePath);
            if (!file.exists()) {
                return new ArrayList<>();
            }
            return objectMapper.readValue(file, new TypeReference<List<Meeting>>() {});
        } catch (IOException e) {
            return new ArrayList<>();
        }
    }

    // ---- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ----

    /** –û—Ñ—Ñ–µ—Ä—ã: —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ Google Sheets (–Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) */
    public Map<String, Integer> getWeeklyOfferStats(Long userId) {
        return googleSheetsService.getWeeklyStatsFromSheets(userId);
    }

    /** –ü–µ—Ä–µ–Ω–æ—Å—ã: —Ç–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ–º –∏–∑ Google Sheets, –∞ –Ω–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON */
    public Map<String, Integer> getWeeklyRescheduleStats(Long userId) {
        return googleSheetsService.getWeeklyRescheduleStatsFromSheets(userId);
    }

    /** –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: —á–∏—Ç–∞–µ–º –∏–∑ Google Sheets, –∞ –Ω–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON */
    public List<Meeting> getWeeklyMeetingsWithComments(Long userId) {
        return googleSheetsService.getWeeklyCommentsFromSheets(userId);
    }

    public void clearUserStats(Long userId) {
        try {
            List<Meeting> allMeetings = loadAllMeetings();
            // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á—É–∂–∏–µ –≤—Å—Ç—Ä–µ—á–∏
            List<Meeting> filteredMeetings = allMeetings.stream()
                    .filter(meeting -> !Objects.equals(meeting.getUserId(), userId))
                    .collect(Collectors.toList());
            objectMapper.writeValue(new File(dataFilePath), filteredMeetings);
        } catch (IOException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e);
        }
    }

    // ---- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ ----

    public String formatOfferStats(Map<String, Integer> stats) {
        LocalDate ws = startOfWeek(LocalDate.now(ZONE));
        String range = formatWeekRange(ws);

        if (stats == null || stats.isEmpty()) {
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é (" + range + ") –ø—É—Å—Ç–∞.\n–î–æ–±–∞–≤—å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏!";
        }
        StringBuilder sb = new StringBuilder("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é (" + range + "):\n\n");
        stats.entrySet().stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                .forEach(entry -> sb.append("‚Ä¢ ").append(entry.getKey()).append(": ").append(entry.getValue()).append("\n"));
        return sb.toString();
    }

    public String formatRescheduleStats(Map<String, Integer> stats) {
        LocalDate ws = startOfWeek(LocalDate.now(ZONE));
        String range = formatWeekRange(ws);

        if (stats == null || stats.isEmpty()) {
            return "üìÖ –ü–µ—Ä–µ–Ω–æ—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é (" + range + ") –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n–û—Ç–ª–∏—á–Ω–æ ‚Äî –≤—Å—Ç—Ä–µ—á–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ –ø–ª–∞–Ω—É!";
        }
        StringBuilder sb = new StringBuilder("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é (" + range + "):\n\n");
        stats.entrySet().stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                .forEach(entry -> sb.append("‚Ä¢ ").append(entry.getKey()).append(": ").append(entry.getValue()).append("\n"));
        return sb.toString();
    }

    public String formatMeetingsWithComments(List<Meeting> meetings) {
        LocalDate ws = startOfWeek(LocalDate.now(ZONE));
        String range = formatWeekRange(ws);

        if (meetings == null || meetings.isEmpty()) {
            return "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é (" + range + ") –Ω–µ—Ç.";
        }
        StringBuilder sb = new StringBuilder("üìù –í—Å—Ç—Ä–µ—á–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∑–∞ –Ω–µ–¥–µ–ª—é (" + range + "):\n\n");
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd.MM HH:mm");
        meetings.forEach(meeting -> {
            String dateTime = meeting.getTimestamp().format(dtf);
            String type = (meeting.getMeetingType() == MeetingType.RESCHEDULED) ? "–ü–µ—Ä–µ–Ω–æ—Å" : "–í—Å—Ç—Ä–µ—á–∞";
            sb.append("üïê ").append(dateTime).append(" (").append(type).append(")\n");
            sb.append("üí¨ ").append(meeting.getComment()).append("\n\n");
        });
        return sb.toString();
    }

    /**
     * –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏, –¥–æ–±–∞–≤–ª—è—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –æ—Ñ—Ñ–µ—Ä–æ–≤ –∏ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏
     */
    public String getModifiedMeetingText(Long userId, String originalText) {
        List<Meeting> allMeetings = loadAllMeetings();
        
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—Å—Ç—Ä–µ—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
        Meeting targetMeeting = allMeetings.stream()
                .filter(meeting -> Objects.equals(meeting.getUserId(), userId))
                .filter(meeting -> meeting.getOriginalText() != null && 
                         meeting.getOriginalText().trim().equals(originalText.trim()))
                .max((m1, m2) -> m1.getTimestamp().compareTo(m2.getTimestamp()))
                .orElse(null);
        
        if (targetMeeting == null) {
            return "‚ùå –í—Å—Ç—Ä–µ—á–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
        }
        
        return modifyTextWithMeetingData(targetMeeting);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏ –ø–æ ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    public String getModifiedMeetingTextById(String activityId) {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ Google Sheets
        Meeting targetMeeting = googleSheetsService.findMeetingById(activityId);
        
        if (targetMeeting == null) {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Google Sheets, –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
            List<Meeting> allMeetings = loadAllMeetings();
            targetMeeting = allMeetings.stream()
                    .filter(meeting -> activityId.equals(meeting.getId()))
                    .findFirst()
                    .orElse(null);
        }
        
        if (targetMeeting == null) {
            return null; // –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        }
        
        return modifyTextWithMeetingData(targetMeeting);
    }
    
    /**
     * –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏, –¥–æ–±–∞–≤–ª—è—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ "–ú–æ–π –≤–æ–ø—Ä–æ—Å:"
     */
    private String modifyTextWithMeetingData(Meeting meeting) {
        String originalText = meeting.getOriginalText();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é "–ú–æ–π –≤–æ–ø—Ä–æ—Å:" (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä)
        String lowerText = originalText.toLowerCase();
        int questionIndex = lowerText.indexOf("–º–æ–π –≤–æ–ø—Ä–æ—Å:");
        
        if (questionIndex == -1) {
            return originalText; // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –¥–æ "–ú–æ–π –≤–æ–ø—Ä–æ—Å:"
        String beforeQuestion = originalText.substring(0, questionIndex + "–º–æ–π –≤–æ–ø—Ä–æ—Å:".length());
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ "–ú–æ–π –≤–æ–ø—Ä–æ—Å:"
        StringBuilder modifiedPart = new StringBuilder();
        
        if (meeting.getMeetingType() == MeetingType.RESCHEDULED) {
            // –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
            modifiedPart.append(" –ü–ï–†–ï–ù–ï–°–ï–ù–û - ");
            modifiedPart.append(meeting.getRescheduleReason());
            if (meeting.getComment() != null && !meeting.getComment().trim().isEmpty()) {
                modifiedPart.append(" (").append(meeting.getComment()).append(")");
            }
            modifiedPart.append(" [").append(meeting.getTimestamp().format(dateFormatter))
                       .append(" ").append(meeting.getTimestamp().format(timeFormatter)).append("]");
            
        } else if (meeting.getMeetingType() == MeetingType.COMMENT) {
            // –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            modifiedPart.append(" –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô - ");
            modifiedPart.append(meeting.getComment());
            modifiedPart.append(" [").append(meeting.getTimestamp().format(dateFormatter))
                       .append(" ").append(meeting.getTimestamp().format(timeFormatter)).append("]");
            
        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏
            if (meeting.getOffers() != null && !meeting.getOffers().isEmpty()) {
                modifiedPart.append(" ");
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ñ—Ñ–µ—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
                Map<String, Long> offerCounts = meeting.getOffers().stream()
                        .collect(Collectors.groupingBy(offer -> offer, Collectors.counting()));
                
                List<String> offerDescriptions = new ArrayList<>();
                for (Map.Entry<String, Long> entry : offerCounts.entrySet()) {
                    String offerName = entry.getKey();
                    Long count = entry.getValue();
                    if (count > 1) {
                        offerDescriptions.add(offerName + " (" + count + ")");
                    } else {
                        offerDescriptions.add(offerName);
                    }
                }
                
                modifiedPart.append(String.join(", ", offerDescriptions));
                modifiedPart.append(" [").append(meeting.getTimestamp().format(dateFormatter))
                           .append(" ").append(meeting.getTimestamp().format(timeFormatter)).append("]");
            }
        }
        
        return beforeQuestion + modifiedPart.toString();
    }
}
