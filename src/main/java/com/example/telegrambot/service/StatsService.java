package com.example.telegrambot.service;

import com.example.telegrambot.model.Meeting;
import com.example.telegrambot.model.MeetingType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class StatsService {

    private final ObjectMapper objectMapper;
    private final String dataFilePath = "meetings.json";
    private final GoogleSheetsService googleSheetsService;

    public StatsService(GoogleSheetsService googleSheetsService) {
        this.objectMapper = new ObjectMapper();
        this.objectMapper.registerModule(new JavaTimeModule());
        this.googleSheetsService = googleSheetsService;
    }

    public void saveMeeting(Meeting meeting) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (–∫–∞–∫ backup)
            List<Meeting> meetings = loadAllMeetings();
            meetings.add(meeting);
            objectMapper.writeValue(new File(dataFilePath), meetings);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–µ—á–∏ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏
            if (meeting.getMeetingType() == MeetingType.COMPLETED && !meeting.getOffers().isEmpty()) {
                googleSheetsService.saveMeetingToSheets(meeting.getUserId(), meeting.getOffers());
            }

        } catch (IOException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏", e);
        }
    }

    public List<Meeting> loadAllMeetings() {
        try {
            File file = new File(dataFilePath);
            if (!file.exists()) {
                return new ArrayList<>();
            }

            return objectMapper.readValue(file, new TypeReference<List<Meeting>>() {});
        } catch (IOException e) {
            return new ArrayList<>();
        }
    }

    public Map<String, Integer> getWeeklyOfferStats(Long userId) {
        // –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –≤—Å—Ç—Ä–µ—á–∞–º —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏ –∏–∑ Google Sheets
        return googleSheetsService.getWeeklyStatsFromSheets(userId);
    }

    public Map<String, Integer> getWeeklyRescheduleStats(Long userId) {
        LocalDateTime weekAgo = LocalDateTime.now().minusDays(7);

        List<Meeting> weeklyRescheduledMeetings = loadAllMeetings().stream()
                .filter(meeting -> meeting.getUserId() != null && meeting.getUserId().equals(userId))
                .filter(meeting -> meeting.getTimestamp().isAfter(weekAgo))
                .filter(meeting -> meeting.getMeetingType() == MeetingType.RESCHEDULED)
                .collect(Collectors.toList());

        Map<String, Integer> rescheduleStats = new HashMap<>();

        for (Meeting meeting : weeklyRescheduledMeetings) {
            String reason = meeting.getRescheduleReason();
            if (reason != null) {
                rescheduleStats.put(reason, rescheduleStats.getOrDefault(reason, 0) + 1);
            }
        }

        return rescheduleStats;
    }

    public List<Meeting> getWeeklyMeetingsWithComments(Long userId) {
        LocalDateTime weekAgo = LocalDateTime.now().minusDays(7);

        return loadAllMeetings().stream()
                .filter(meeting -> meeting.getUserId() != null && meeting.getUserId().equals(userId))
                .filter(meeting -> meeting.getTimestamp().isAfter(weekAgo))
                .filter(meeting -> (meeting.getComment() != null && !meeting.getComment().isEmpty()) ||
                        meeting.getMeetingType() == MeetingType.COMMENT)
                .collect(Collectors.toList());
    }

    public void clearUserStats(Long userId) {
        try {
            List<Meeting> allMeetings = loadAllMeetings();
            // –§–∏–ª—å—Ç—Ä—É–µ–º - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–µ—á–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            List<Meeting> filteredMeetings = allMeetings.stream()
                    .filter(meeting -> !Objects.equals(meeting.getUserId(), userId))
                    .collect(Collectors.toList());

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            objectMapper.writeValue(new File(dataFilePath), filteredMeetings);
        } catch (IOException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e);
        }
    }

    public String formatOfferStats(Map<String, Integer> stats) {
        if (stats.isEmpty()) {
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é –ø—É—Å—Ç–∞.\n–î–æ–±–∞–≤—å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏!";
        }

        StringBuilder sb = new StringBuilder("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n");

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        stats.entrySet().stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                .forEach(entry -> {
                    sb.append("‚Ä¢ ").append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
                });

        return sb.toString();
    }

    public String formatRescheduleStats(Map<String, Integer> stats) {
        if (stats.isEmpty()) {
            return "üìÖ –ü–µ—Ä–µ–Ω–æ—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n–û—Ç–ª–∏—á–Ω–æ - –≤—Å—Ç—Ä–µ—á–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ –ø–ª–∞–Ω—É!";
        }

        StringBuilder sb = new StringBuilder("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n");

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        stats.entrySet().stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                .forEach(entry -> {
                    sb.append("‚Ä¢ ").append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
                });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
        int totalReschedules = stats.values().stream().mapToInt(Integer::intValue).sum();
        sb.append("\n–í—Å–µ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤: ").append(totalReschedules);

        return sb.toString();
    }

    public String formatMeetingsWithComments(List<Meeting> meetings) {
        if (meetings.isEmpty()) {
            return "üìù –í—Å—Ç—Ä–µ—á–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
        }

        StringBuilder sb = new StringBuilder("üìù –í—Å—Ç—Ä–µ—á–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n");

        meetings.forEach(meeting -> {
            String dateTime = meeting.getTimestamp().format(java.time.format.DateTimeFormatter.ofPattern("dd.MM HH:mm"));
            String type = meeting.getMeetingType() == MeetingType.COMPLETED ? "–í—Å—Ç—Ä–µ—á–∞" : "–ü–µ—Ä–µ–Ω–æ—Å";

            sb.append("üïê ").append(dateTime).append(" (").append(type).append(")\n");
            sb.append("üí¨ ").append(meeting.getComment()).append("\n\n");
        });

        return sb.toString();
    }
}