package com.example.telegrambot.service;

import com.example.telegrambot.model.Meeting;
import com.example.telegrambot.model.MeetingType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class StatsService {

    private final ObjectMapper objectMapper;
    private final String dataFilePath = "meetings.json";
    private final GoogleSheetsService googleSheetsService;

    public StatsService(GoogleSheetsService googleSheetsService) {
        this.objectMapper = new ObjectMapper();
        this.objectMapper.registerModule(new JavaTimeModule());
        this.googleSheetsService = googleSheetsService;
    }

    public void saveMeeting(Meeting meeting) {
        try {
            // backup –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            List<Meeting> meetings = loadAllMeetings();
            meetings.add(meeting);
            objectMapper.writeValue(new File(dataFilePath), meetings);

            // –∑–∞–ø–∏—Å—å –≤ Google Sheets
            if (meeting.getMeetingType() == MeetingType.RESCHEDULED) {
                googleSheetsService.saveRescheduleToSheets(meeting.getUserId(), meeting.getRescheduleReason(), meeting.getComment());
            } else if (meeting.getMeetingType() == MeetingType.COMMENT) {
                googleSheetsService.saveCommentToSheets(meeting.getUserId(), meeting.getComment());
            } else {
                if (meeting.getOffers() != null && !meeting.getOffers().isEmpty()) {
                    googleSheetsService.saveMeetingToSheets(meeting.getUserId(), meeting.getOffers());
                }
            }
        } catch (IOException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏", e);
        }
    }

    public List<Meeting> loadAllMeetings() {
        try {
            File file = new File(dataFilePath);
            if (!file.exists()) {
                return new ArrayList<>();
            }
            return objectMapper.readValue(file, new TypeReference<List<Meeting>>() {});
        } catch (IOException e) {
            return new ArrayList<>();
        }
    }

    // ---- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ----

    /** –û—Ñ—Ñ–µ—Ä—ã: —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ Google Sheets (–Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) */
    public Map<String, Integer> getWeeklyOfferStats(Long userId) {
        return googleSheetsService.getWeeklyStatsFromSheets(userId);
    }

    /** –ü–µ—Ä–µ–Ω–æ—Å—ã: —Ç–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ–º –∏–∑ Google Sheets, –∞ –Ω–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON */
    public Map<String, Integer> getWeeklyRescheduleStats(Long userId) {
        return googleSheetsService.getWeeklyRescheduleStatsFromSheets(userId);
    }

    /** –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: —á–∏—Ç–∞–µ–º –∏–∑ Google Sheets, –∞ –Ω–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON */
    public List<Meeting> getWeeklyMeetingsWithComments(Long userId) {
        return googleSheetsService.getWeeklyCommentsFromSheets(userId);
    }

    public void clearUserStats(Long userId) {
        try {
            List<Meeting> allMeetings = loadAllMeetings();
            // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á—É–∂–∏–µ –≤—Å—Ç—Ä–µ—á–∏
            List<Meeting> filteredMeetings = allMeetings.stream()
                    .filter(meeting -> !Objects.equals(meeting.getUserId(), userId))
                    .collect(Collectors.toList());
            objectMapper.writeValue(new File(dataFilePath), filteredMeetings);
        } catch (IOException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e);
        }
    }

    // ---- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ ----

    public String formatOfferStats(Map<String, Integer> stats) {
        if (stats == null || stats.isEmpty()) {
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é –ø—É—Å—Ç–∞.\n–î–æ–±–∞–≤—å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏!";
        }
        StringBuilder sb = new StringBuilder("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n");
        stats.entrySet().stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                .forEach(entry -> sb.append("‚Ä¢ ").append(entry.getKey()).append(": ").append(entry.getValue()).append("\n"));
        return sb.toString();
    }

    public String formatRescheduleStats(Map<String, Integer> stats) {
        if (stats == null || stats.isEmpty()) {
            return "üìÖ –ü–µ—Ä–µ–Ω–æ—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n–û—Ç–ª–∏—á–Ω–æ ‚Äî –≤—Å—Ç—Ä–µ—á–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ –ø–ª–∞–Ω—É!";
        }
        StringBuilder sb = new StringBuilder("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n");
        stats.entrySet().stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                .forEach(entry -> sb.append("‚Ä¢ ").append(entry.getKey()).append(": ").append(entry.getValue()).append("\n"));
        return sb.toString();
    }

    public String formatMeetingsWithComments(List<Meeting> meetings) {
        if (meetings == null || meetings.isEmpty()) {
            return "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ—Ç.";
        }
        StringBuilder sb = new StringBuilder("üìù –í—Å—Ç—Ä–µ—á–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n");
        meetings.forEach(meeting -> {
            String dateTime = meeting.getTimestamp().format(java.time.format.DateTimeFormatter.ofPattern("dd.MM HH:mm"));
            // –¥–ª—è –ª–∏—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ ¬´–í—Å—Ç—Ä–µ—á–∞¬ª
            String type = (meeting.getMeetingType() == MeetingType.RESCHEDULED) ? "–ü–µ—Ä–µ–Ω–æ—Å" : "–í—Å—Ç—Ä–µ—á–∞";
            sb.append("üïê ").append(dateTime).append(" (").append(type).append(")\n");
            sb.append("üí¨ ").append(meeting.getComment()).append("\n\n");
        });
        return sb.toString();
    }
}
