package com.example.telegrambot;

import com.example.telegrambot.model.Meeting;
import com.example.telegrambot.model.MeetingType;
import com.example.telegrambot.service.MessageParserService;
import com.example.telegrambot.service.StatsService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class TelegramBotService extends TelegramLongPollingBot {

    @Value("${bot.username}")
    private String botUsername;

    @Value("${bot.token}")
    private String botToken;

    private final MessageParserService messageParserService;
    private final StatsService statsService;
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ç–æ –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞)
    private final Map<Long, Boolean> userModifyMode = new HashMap<>();

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è dependency injection
    public TelegramBotService(MessageParserService messageParserService, StatsService statsService) {
        this.messageParserService = messageParserService;
        this.statsService = statsService;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Message message = update.getMessage();
            String messageText = message.getText();
            long chatId = message.getChatId();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (messageText.equals("/start")) {
                sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! üìä\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —à–∞–±–ª–æ–Ω –≤—Å—Ç—Ä–µ—á–∏ –∏ —è –±—É–¥—É —Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É." +
                        "\n\n–î–ª—è –æ—Ñ—Ñ–µ—Ä–æ–≤:\n–ú–æ–π –≤–æ–ø—Ä–æ—Å: –∫–∫ –Ω—Å –∏–Ω–≤–µ—Å—Ç\n\n" +
                        "–î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤:\n–ú–æ–π –≤–æ–ø—Ä–æ—Å: –ø–µ—Ä–µ–Ω–æ—Å –Ω–µ–¥–æ–∑–≤–æ–Ω –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª\n\n" +
                        "–ö–æ–º–∞–Ω–¥—ã:\n/offers - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂\n/rescheduling - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤\n/" +
                        "meetings - –≤—Å—Ç—Ä–µ—á–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏\n/modify - –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏\n/reset - –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ");
            } else if (messageText.equals("/offers")) {
                Long userId = message.getFrom().getId();
                Map<String, Integer> offerStats = statsService.getWeeklyOfferStats(userId);
                String statsText = statsService.formatOfferStats(offerStats);
                sendMessage(chatId, statsText);
            } else if (messageText.equals("/rescheduling")) {
                Long userId = message.getFrom().getId();
                Map<String, Integer> rescheduleStats = statsService.getWeeklyRescheduleStats(userId);
                String statsText = statsService.formatRescheduleStats(rescheduleStats);
                sendMessage(chatId, statsText);
            } else if (messageText.equals("/meetings")) {
                Long userId = message.getFrom().getId();
                List<Meeting> meetings = statsService.getWeeklyMeetingsWithComments(userId);
                String meetingsText = statsService.formatMeetingsWithComments(meetings);
                sendMessage(chatId, meetingsText);
            } else if (messageText.equals("/reset")) {
                Long userId = message.getFrom().getId();
                statsService.clearUserStats(userId);
                sendMessage(chatId, "‚úÖ –í—Å—è –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞!");
            } else if (messageText.equals("/modify")) {
                Long userId = message.getFrom().getId();
                userModifyMode.put(userId, true);
                sendMessage(chatId, "üîç –ü–æ–∏—Å–∫ –≤—Å—Ç—Ä–µ—á –ø–æ ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n" +
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏\n\n" +
                        "–ü—Ä–∏–º–µ—Ä: aOBv7DDXE4AqEPC8jHAqcA\n\n" +
                        "‚ùå –î–ª—è –≤—ã—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel");
            } else if (messageText.equals("/cancel")) {
                Long userId = message.getFrom().getId();
                userModifyMode.remove(userId);
                sendMessage(chatId, "‚úÖ –†–µ–∂–∏–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
            else if (messageText.toLowerCase().contains("–º–æ–π –≤–æ–ø—Ä–æ—Å:")) {
                Long userId = message.getFrom().getId();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if (userModifyMode.getOrDefault(userId, false)) {
                    handleModifyText(chatId, messageText, userId);
                    userModifyMode.remove(userId); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                } else {
                    handleMeetingMessage(chatId, messageText, message);
                }
            } else {
                Long userId = message.getFrom().getId();
                if (userModifyMode.getOrDefault(userId, false)) {
                    handleModifyModeInput(chatId, messageText, userId);
                } else {
                    sendMessage(chatId, "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
                }
            }
        }
    }

    private void handleMeetingMessage(long chatId, String messageText, Message message) {
        try {
            Long userId = message.getFrom().getId();
            Meeting meeting = messageParserService.parseMeetingMessage(messageText, userId);

            if (meeting == null) {
                sendMessage(chatId, "‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ '–ú–æ–π –≤–æ–ø—Ä–æ—Å:' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏");
                return;
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—Ç—Ä–µ—á—É (–ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
            statsService.saveMeeting(meeting);
            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—Å—Ç—Ä–µ—á–∏
            StringBuilder response = new StringBuilder();

            if (meeting.getMeetingType() == MeetingType.RESCHEDULED) {
                response.append("üìÖ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n\n");
                response.append("–ü—Ä–∏—á–∏–Ω–∞: ").append(meeting.getRescheduleReason()).append("\n");
                response.append("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ").append(meeting.getComment());
            } else if (meeting.getMeetingType() == MeetingType.COMMENT) {
                response.append("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n");
                response.append("–¢–µ–∫—Å—Ç: ").append(meeting.getComment());
            } else {
                if (meeting.getOffers().isEmpty()) {
                    sendMessage(chatId, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ—Å–ª–µ '–ú–æ–π –≤–æ–ø—Ä–æ—Å:'");
                    return;
                }

                response.append("‚úÖ –í—Å—Ç—Ä–µ—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã:\n");
                for (String offer : meeting.getOffers()) {
                    response.append("‚Ä¢ ").append(offer).append("\n");
                }
            }

            sendMessage(chatId, response.toString());

        } catch (Exception e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å—Ç—Ä–µ—á–∏: " + e.getMessage());
        }
    }

    private void handleModifyText(long chatId, String messageText, Long userId) {
        try {
            String modifiedText = statsService.getModifiedMeetingText(userId, messageText);
            sendMessage(chatId, "üìù –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏:\n\n" + modifiedText);
        } catch (Exception e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: " + e.getMessage());
        }
    }

    private void handleModifyModeInput(long chatId, String input, Long userId) {
        try {
            // –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∏—â–µ–º –≤—Å—Ç—Ä–µ—á—É –ø–æ ID
            String trimmedInput = input.trim();
            
            if (isActivityId(trimmedInput)) {
                String modifiedText = statsService.getModifiedMeetingTextById(trimmedInput);
                if (modifiedText != null && !modifiedText.isEmpty()) {
                    sendMessage(chatId, "üìù –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏:\n\n" + modifiedText);
                } else {
                    sendMessage(chatId, "‚ùå –í—Å—Ç—Ä–µ—á–∞ —Å ID " + trimmedInput + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                }
                userModifyMode.remove(userId); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                return;
            }
            
            // –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.\n\n" +
                    "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ ID –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: aOBv7DDXE4AqEPC8jHAqcA)\n\n" +
                    "‚ùå –î–ª—è –≤—ã—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel");
            
        } catch (Exception e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞: " + e.getMessage());
        }
    }

    private boolean isActivityId(String input) {
        // ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–∞ –±–æ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
        return input != null && input.length() > 10 && input.matches("[a-zA-Z0-9]+");
    }

    private boolean isDateInput(String input) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú
        return input != null && input.matches("\\d{1,2}\\.\\d{1,2}");
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}