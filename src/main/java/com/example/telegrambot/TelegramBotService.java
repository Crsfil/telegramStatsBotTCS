package com.example.telegrambot;

import com.example.telegrambot.model.Meeting;
import com.example.telegrambot.service.MessageParserService;
import com.example.telegrambot.service.StatsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.Map;

@Component
public class TelegramBotService extends TelegramLongPollingBot {

    @Value("${bot.username}")
    private String botUsername;

    @Value("${bot.token}")
    private String botToken;

    private final MessageParserService messageParserService;
    private final StatsService statsService;

    public TelegramBotService(MessageParserService messageParserService, StatsService statsService) {
        this.messageParserService = messageParserService;
        this.statsService = statsService;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Message message = update.getMessage();
            String messageText = message.getText();
            long chatId = message.getChatId();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (messageText.equals("/start")) {
                sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! üìä\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å '–ú–æ–π –≤–æ–ø—Ä–æ—Å:' –∏ —è –±—É–¥—É —Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é");
            }
            else if (messageText.equals("/stats")) {
                Map<String, Integer> weeklyStats = statsService.getWeeklyStats();
                String statsText = statsService.formatStats(weeklyStats);
                sendMessage(chatId, statsText);
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏
            else if (messageText.toLowerCase().contains("–º–æ–π –≤–æ–ø—Ä–æ—Å:")) {
                handleMeetingMessage(chatId, messageText, message);
            }
            else {
                sendMessage(chatId, "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
            }
        }
    }

    private void handleMeetingMessage(long chatId, String messageText, Message message) {
        try {
            Long userId = getUserIdFromChatId(chatId);
            Meeting meeting = messageParserService.parseMeetingMessage(messageText, userId);

            if (meeting == null) {
                sendMessage(chatId, "‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ '–ú–æ–π –≤–æ–ø—Ä–æ—Å:' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏");
                return;
            }

            if (meeting.getOffers().isEmpty()) {
                sendMessage(chatId, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ—Å–ª–µ '–ú–æ–π –≤–æ–ø—Ä–æ—Å:'");
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—Ç—Ä–µ—á—É
            statsService.saveMeeting(meeting);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            StringBuilder response = new StringBuilder("‚úÖ –í—Å—Ç—Ä–µ—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã:\n");
            for (String offer : meeting.getOffers()) {
                response.append("‚Ä¢ ").append(offer).append("\n");
            }

            sendMessage(chatId, response.toString());

        } catch (Exception e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å—Ç—Ä–µ—á–∏: " + e.getMessage());
        }
    }

    // –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ - –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å userId –∏–∑ Update
    private Long getUserIdFromChatId(long chatId) {
        return chatId; // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º chatId –∫–∞–∫ userId
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}