package com.example.telegrambot;

import com.example.telegrambot.model.Meeting;
import com.example.telegrambot.model.MeetingType;
import com.example.telegrambot.service.MessageParserService;
import com.example.telegrambot.service.StatsService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;
import java.util.Map;

@Component
public class TelegramBotService extends TelegramLongPollingBot {

    @Value("${bot.username}")
    private String botUsername;

    @Value("${bot.token}")
    private String botToken;

    private final MessageParserService messageParserService;
    private final StatsService statsService;

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è dependency injection
    public TelegramBotService(MessageParserService messageParserService, StatsService statsService) {
        this.messageParserService = messageParserService;
        this.statsService = statsService;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Message message = update.getMessage();
            String messageText = message.getText();
            long chatId = message.getChatId();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (messageText.equals("/start")) {
                sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! üìä\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —à–∞–±–ª–æ–Ω –≤—Å—Ç—Ä–µ—á–∏ –∏ —è –±—É–¥—É —Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n–î–ª—è –æ—Ñ—Ñ–µ—Ä–æ–≤:\n–ú–æ–π –≤–æ–ø—Ä–æ—Å: –∫–∫ –Ω—Å –∏–Ω–≤–µ—Å—Ç\n\n–î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤:\n–ú–æ–π –≤–æ–ø—Ä–æ—Å: –ø–µ—Ä–µ–Ω–æ—Å –Ω–µ–¥–æ–∑–≤–æ–Ω –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª\n\n–ö–æ–º–∞–Ω–¥—ã:\n/offers - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂\n/rescheduling - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤\n/meetings - –≤—Å—Ç—Ä–µ—á–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏\n/reset - –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ");
            } else if (messageText.equals("/offers")) {
                Long userId = message.getFrom().getId();
                Map<String, Integer> offerStats = statsService.getWeeklyOfferStats(userId);
                String statsText = statsService.formatOfferStats(offerStats);
                sendMessage(chatId, statsText);
            } else if (messageText.equals("/rescheduling")) {
                Long userId = message.getFrom().getId();
                Map<String, Integer> rescheduleStats = statsService.getWeeklyRescheduleStats(userId);
                String statsText = statsService.formatRescheduleStats(rescheduleStats);
                sendMessage(chatId, statsText);
            } else if (messageText.equals("/meetings")) {
                Long userId = message.getFrom().getId();
                List<Meeting> meetings = statsService.getWeeklyMeetingsWithComments(userId);
                String meetingsText = statsService.formatMeetingsWithComments(meetings);
                sendMessage(chatId, meetingsText);
            } else if (messageText.equals("/reset")) {
                Long userId = message.getFrom().getId();
                statsService.clearUserStats(userId);
                sendMessage(chatId, "‚úÖ –í—Å—è –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞!");
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
            else if (messageText.toLowerCase().contains("–º–æ–π –≤–æ–ø—Ä–æ—Å:")) {
                handleMeetingMessage(chatId, messageText, message);
            } else {
                sendMessage(chatId, "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
            }
        }
    }

    private void handleMeetingMessage(long chatId, String messageText, Message message) {
        try {
            Long userId = message.getFrom().getId();
            Meeting meeting = messageParserService.parseMeetingMessage(messageText, userId);

            if (meeting == null) {
                sendMessage(chatId, "‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ '–ú–æ–π –≤–æ–ø—Ä–æ—Å:' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏");
                return;
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—Ç—Ä–µ—á—É (–ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
            statsService.saveMeeting(meeting);
            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—Å—Ç—Ä–µ—á–∏
            StringBuilder response = new StringBuilder();

            if (meeting.getMeetingType() == MeetingType.RESCHEDULED) {
                response.append("üìÖ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n\n");
                response.append("–ü—Ä–∏—á–∏–Ω–∞: ").append(meeting.getRescheduleReason()).append("\n");
                response.append("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ").append(meeting.getComment());
            } else if (meeting.getMeetingType() == MeetingType.COMMENT) {
                response.append("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n");
                response.append("–¢–µ–∫—Å—Ç: ").append(meeting.getComment());
            } else {
                if (meeting.getOffers().isEmpty()) {
                    sendMessage(chatId, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ—Å–ª–µ '–ú–æ–π –≤–æ–ø—Ä–æ—Å:'");
                    return;
                }

                response.append("‚úÖ –í—Å—Ç—Ä–µ—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã:\n");
                for (String offer : meeting.getOffers()) {
                    response.append("‚Ä¢ ").append(offer).append("\n");
                }
            }

            sendMessage(chatId, response.toString());

        } catch (Exception e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å—Ç—Ä–µ—á–∏: " + e.getMessage());
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}